openapi: 3.0.0
info:
  description: "This is the API specification for the SaaS Middleware.

  ### Versioning\n
  This API specification uses Semantic Versioning 2.0 (https://semver.org/spec/v2.0.0.html).
  "
  version: 1.0.0
  title: Simulation-as-a-Service (SaaS) Middleware API

paths:
  /api/v1/repository:
    get:
      description: "Searches a DOR for data objects that match the search criteria. Two kinds of criteria are
      distinguished: constraints and patterns. Search constraints are conjunctive, i.e., all constraints have
      to be matched in order for a data objective to be considered for inclusion in the search result. Constraints
      can be used to only include data objects that match a given `owner_iid`, `data_type`, `data_format` or list of
      `c_hashes`. After applying the search constraints, the result set is further filtered by the search patterns.
      Unlike constraints, search patterns are disjunctive, i.e., so long as any pattern is matched, the data object
      is included in the final result set. Search patterns are applied to the data object tags (key/value pair). A
      search pattern is considered matched if it is a substring of either the key or value element of any of the data
      object tags."
      tags:
        - DOR (Data Object Repository)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              description: "Search criteria containing (1) the search constraints and (2) the search patterns."
              properties:
                owner_iid:
                  type: string
                  format: iid
                  description: "The id of the owner identity to whose objects the search should be limited."
                  example: "581e2571c6fa8ba01ba6456df4d1fe175abe952362ee925dc9396e67d7fbeeaf"
                data_type:
                  type: string
                  description: "The name of the data type."
                  example: "JSONObject"
                data_format:
                  type: string
                  description: "The name of the data format."
                  example: "json"
                c_hashes:
                  type: array
                  items:
                    type: string
                  description: "A list of c_hash values."
                  example: ['bd45cc8eef34e8b59084c2192308ce4f96ef077d7d541e7d4ca690cc9674fac2']
                patterns:
                  type: array
                  items:
                    type: string
                  description: "A list of strings that needs to be contained by any of the tags in order for the data
                  object to be included in the search result."
                  example: "case_study"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/data_object_meta"
        500:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /api/v1/repository/statistics:
    get:
      description: "Retrieves some statistics from the DOR."
      tags:
        - DOR (Data Object Repository)
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data_types:
                    description: "A list of all data types found in the DOR."
                    type: array
                    items:
                      type: string
                    example: ['JSONObject', 'DUCT.NearSurfaceClimateVariables', 'DUCT.AHProfile']
                  data_formats:
                    description: "A list of all data formats found in the DOR."
                    type: array
                    items:
                      type: string
                    example: ['json', 'hdf5']
                  tag_keys:
                    description: "A list of al unique tag keys found in the DOR."
                    type: array
                    items:
                      type: string
                    example: ["job_id","name","commit-id","config","path"]
                required:
                  - data_types
                  - data_formats
                  - tag_keys
        500:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /api/v1/repository/add:
    post:
      description: "Adds a new data object to the DOR and returns the meta information for this data object. The content of the 
      data object itself is uploaded as an attachment (binary). There is no restriction as to the nature or size of the content."
      tags:
        - DOR (Data Object Repository)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                body:
                  description: "Information about the data object."
                  type: object
                  properties:
                      owner_iid:
                        description: "The ID of the identity that owns this data object."
                        type: string
                        format: iid
                        example: "32tm2i6ba6v7lw59tfduvldt8ofai40grxogy2k3hi4hnzt6do0zcwx9k3e23j9h"
                      created_by:
                        type: string
                        description: "A reference to who created the data object."
                        example: "581e2571c6fa8ba01ba6456df4d1fe175abe952362ee925dc9396e67d7fbeeaf"
                      data_type:
                        description: "The data type of the data object."
                        type: string
                        example: "JSONObject"
                      data_format:
                        description: "The data format of the data object."
                        type: string
                        example: "json"
                      access_restricted:
                        type: boolean
                        description: "Indicates whether access to the data object should be restricted (`true`) or not (`false`)."
                      content_encrypted:
                        type: boolean
                        description: "Indicates whether the content of the data object is encrypted (`true`) or not (`false`)."
                      recipe:
                        $ref: "#/components/schemas/recipe"
                  required:
                    - owner_iid
                    - created_by
                    - data_type
                    - data_format
                    - access_restricted
                    - content_encrypted

                files:
                  description: "A single file containing the contents of the data object."
                  type: object
                  properties:
                    attachment:
                      description: "The binary data object content."
                      type: string
                      format: binary
                  required:
                    - attachment
      
              required:
                - body
                - files
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/data_object_meta"
        500:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /api/v1/repository/add-gpp:
    post:
      description: "Adds a new Git-Processor-Pointer (GPP) data object to the DOR and returns the meta information for this data object.
      If the repository specified in the GPP information (see 'source' field) is private, valid GitHub credentials need to be provided. 
      The DOR will use these credentials to access (i.e., clone) the repository. The credentials information will not be stored by the
      DOR. It is not required to specify the `proc_descriptor` when adding a GPP to the DOR."
      tags:
        - DOR (Data Object Repository)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                body:
                  description: "Information about the data object."
                  type: object
                  properties:
                      owner_iid:
                        description: "The ID of the identity that owns this data object."
                        type: string
                        format: iid
                        example: "32tm2i6ba6v7lw59tfduvldt8ofai40grxogy2k3hi4hnzt6do0zcwx9k3e23j9h"
                      created_by:
                        type: string
                        description: "A reference to who created the data object."
                        example: "581e2571c6fa8ba01ba6456df4d1fe175abe952362ee925dc9396e67d7fbeeaf"
                      gpp:
                        $ref: "#/components/schemas/git_processor_pointer"
                      github_credentials:
                        $ref: "#/components/schemas/github_credentials"
                      recipe:
                        $ref: "#/components/schemas/recipe"
                  required:
                    - owner_iid
                    - created_by
                    - gpp

                files:
                  description: "A single file containing the contents of the data object."
                  type: object
                  properties:
                    attachment:
                      description: "The binary data object content."
                      type: string
                      format: binary
                  required:
                    - attachment
      
              required:
                - body
                - files
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/data_object_meta"
        500:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /api/v1/repository/{obj_id}:
    delete:
      description: "Deletes a data object from the DOR and returns the meta information of that data object. Authorisation required by the owner
      of the data object."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: path
          description: "The id of the data object."
          name: obj_id
          schema:
            type: string
            example: "d3a37093c1086d1087cb8df01352c496108bda6fe0218f541ce73f2090b648e7"
          required: true
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                authorisation:
                  $ref: "#/components/schemas/authorisation"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/data_object_meta"
        500:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /api/v1/repository/{obj_id}/meta:
    get:
      description: "Retrieves the meta information of a data object."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: path
          description: "The id of the data object."
          name: obj_id
          schema:
            type: string
            example: "d3a37093c1086d1087cb8df01352c496108bda6fe0218f541ce73f2090b648e7"
          required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/data_object_meta"
        500:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /api/v1/repository/{obj_id}/content:
    get:
      description: "Retrieves the content of a data object. Authorisation required by a user who has been granted access to the data object."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: path
          description: "The id of the data object."
          name: obj_id
          schema:
            type: string
            example: "d3a37093c1086d1087cb8df01352c496108bda6fe0218f541ce73f2090b648e7"
          required: true
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                authorisation:
                  $ref: "#/components/schemas/authorisation"
              required:
                - authorisation
      responses:
        200:
          description: "Success. The data object is sent as a binary stream."
        500:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /api/v1/repository/{obj_id}/access/<user_id>:
    post:
      description: "Grants data object access to a user. Authorisation required by the owner of the data object."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: path
          description: "The id of the data object."
          name: obj_id
          schema:
            type: string
            example: "d3a37093c1086d1087cb8df01352c496108bda6fe0218f541ce73f2090b648e7"
          required: true
        - in: path
          description: "The id of the user's identity."
          name: user_id
          schema:
            type: string
            example: "e6msurpw4kdi86s8xtvca77b0gr2kho7e5vnbzt2jcm4b46p46vdck9z8vss8o8x"
          required: true
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                authorisation:
                  $ref: "#/components/schemas/authorisation"
              required:
                - authorisation
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/data_object_meta"
        500:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    delete:
      description: "Revokes data object access from a user. Authorisation required by the owner of the data object."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: path
          description: "The id of the data object."
          name: obj_id
          schema:
            type: string
            example: "d3a37093c1086d1087cb8df01352c496108bda6fe0218f541ce73f2090b648e7"
          required: true
        - in: path
          description: "The id of the user's identity."
          name: user_id
          schema:
            type: string
            example: "e6msurpw4kdi86s8xtvca77b0gr2kho7e5vnbzt2jcm4b46p46vdck9z8vss8o8x"
          required: true
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                authorisation:
                  $ref: "#/components/schemas/authorisation"
              required:
                - authorisation
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/data_object_meta"
        500:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /api/v1/repository/{obj_id}/owner/<new_owner_id>:
    put:
      description: "Transfers ownership of the data object to another user. Authorisation required by the current owner of the data object."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: path
          description: "The id of the data object."
          name: obj_id
          schema:
            type: string
            example: "d3a37093c1086d1087cb8df01352c496108bda6fe0218f541ce73f2090b648e7"
          required: true
        - in: path
          description: "The id of the new owners's identity."
          name: new_owner_id
          schema:
            type: string
            example: "e6msurpw4kdi86s8xtvca77b0gr2kho7e5vnbzt2jcm4b46p46vdck9z8vss8o8x"
          required: true
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                authorisation:
                  $ref: "#/components/schemas/authorisation"
              required:
                - authorisation
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/data_object_meta"
        500:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /api/v1/repository/{obj_id}/tags:
    put:
      description: "Adds tags to a data object or updates tags in case they already exist. Authorisation required by the owner of the data object."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: path
          description: "The id of the data object."
          name: obj_id
          schema:
            type: string
            example: "d3a37093c1086d1087cb8df01352c496108bda6fe0218f541ce73f2090b648e7"
          required: true
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                body:
                  description: "List of tags (key/value pairs) to be added to the data object (or updated)."
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                      value:
                        type: string
                authorisation:
                  $ref: "#/components/schemas/authorisation"
              required:
                - authorisation
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/data_object_meta"
        500:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    delete:
      description: "Removes tags from a data object. Authorisation required by the owner of the data object."
      tags:
        - DOR (Data Object Repository)
      parameters:
        - in: path
          description: "The id of the data object."
          name: obj_id
          schema:
            type: string
            example: "d3a37093c1086d1087cb8df01352c496108bda6fe0218f541ce73f2090b648e7"
          required: true
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                body:
                  description: "List of keys of tags to be removed from the data object."
                  type: array
                  items:
                    type: string
                authorisation:
                  $ref: "#/components/schemas/authorisation"
              required:
                - authorisation
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/data_object_meta"
        500:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /api/v1/processor:
    get:
      description: "Retrieves a list of processors deployed by the RTI."
      tags:
        - RTI (Runtime Infrastructure)
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  proc_id:
                    description: "The ID of the processor."
                    type: string
                    example: "1b362727cb0576d3079f91d73efaa7f8139a0e4751331fd0d28918ec1a9cd543"
                  proc_descriptor:
                    $ref: "#/components/schemas/proc_descriptor"    
                required:
                  - proc_id
                  - proc_descriptori
        500:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /api/v1/processor/{proc_id}:
    post:
      description: "Deploys a processor to the RTI. By default the processor is deployed on the same machine that
      hosts the RTI. If the processor is supposed to be deployed on a remote machine, corresponding SSH credenitals have to be provided
      which the RTI can use to access the remote machine. Deployment requires the RTI to access the GitHub repository that contains the
      processor. If the repository is not public, corresponding GitHub credentials need to be provided. Note that GitHub credentials
      are not stored. However, if specified, SSH credenitals will be retained by the RTI in order to access the remote machine which
      hosts the deployed processor."
      tags:
        - RTI (Runtime Infrastructure)
      parameters:
        - in: path
          description: "The id of the processor."
          name: proc_id
          schema:
            type: string
            example: "d3a37093c1086d1087cb8df01352c496108bda6fe0218f541ce73f2090b648e7"
          required: true
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                ssh_credentials:
                  $ref: "#/components/schemas/ssh_credentials"
                github_credentials:
                  $ref: "#/components/schemas/github_credentials"  
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/proc_descriptor"
        500:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    delete:
      description: "Undeploys a processor from the RTI."
      tags:
        - RTI (Runtime Infrastructure)
      parameters:
        - in: path
          description: "The id of the processor."
          name: proc_id
          schema:
            type: string
            example: "d3a37093c1086d1087cb8df01352c496108bda6fe0218f541ce73f2090b648e7"
          required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/proc_descriptor"
        500:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /api/v1/processor/{proc_id}/descriptor:
    get:
      description: "Retrieves a processor descriptor from the RTI."
      tags:
        - RTI (Runtime Infrastructure)
      parameters:
        - in: path
          description: "The id of the processor."
          name: proc_id
          schema:
            type: string
            example: "d3a37093c1086d1087cb8df01352c496108bda6fe0218f541ce73f2090b648e7"
          required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/proc_descriptor"
        500:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /api/v1/processor/{proc_id}/jobs:
    post:
      description: "Submits a task to a processor deployed by the RTI, thereby creating a new job."
      tags:
        - RTI (Runtime Infrastructure)
      parameters:
        - in: path
          description: "The id of the processor."
          name: proc_id
          schema:
            type: string
            example: "d3a37093c1086d1087cb8df01352c496108bda6fe0218f541ce73f2090b648e7"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: object
                  properties:
                    task_descriptor:
                      $ref: "#/components/schemas/task_descriptor"
                  required:
                    - task_descriptor
              required:
                - body
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/proc_descriptor"
        500:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    get:
      description: "Retrives the list of jobs processed by a specific processor."
      tags:
        - RTI (Runtime Infrastructure)
      parameters:
        - in: path
          description: "The id of the processor."
          name: proc_id
          schema:
            type: string
            example: "d3a37093c1086d1087cb8df01352c496108bda6fe0218f541ce73f2090b648e7"
          required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/job_descriptor"
        500:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /api/v1/processor/job/{job_id}:
    get:
      description: "Retrieves details about a specific job."
      tags:
        - RTI (Runtime Infrastructure)
      parameters:
        - in: path
          description: "The id of the job."
          name: job_id
          schema:
            type: string
            example: "2SNbQQan"
          required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  job_descriptor:
                    $ref: "#/components/schemas/job_descriptor"
                  status:
                    description: "Status information about the job. The exact content is specific to the processor. However, status will always 
                    include information about the `state` and the `progress` about the job. State can be any of the following: `initialised`, 
                    `running`, `failed`, `successful`. Progress is indicated in percent."
                    type: object
                    example: {
                      'progress': '20', 
                      'state': 'running', 
                      'task': 'run execute.sh'
                    }
                required:
                  - job_descriptor
                  - status
        500:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /api/v1/processor/permission/{req_id}:
    post:
      description: "Submits permissions for a specific request. When a processor needs to process an encrypted data object, it requires the
      necessary permissions (and content key) to process the data object. For this purpose, the RTI will request the content key on the fly,
      i.e., during the initialisation phase of a job, a request to the owners of encrypted data objects are created. Owners can then submit
      the required content key using this endpoint. The request itself is encrypted using the public key of the data object owner and provides
      the following information: 
      `{\n
        'type': 'request_content_key',\n
        'req_id': 'H2dofbWhSZddTah9',\n
        'obj_id': '1e6e ... f6be',\n
        'ephemeral_public_key': 'MIIC ... Q==',\n
        'user_iid': 'fyll ... ev00',\n
        'node_id': '9mip ... x85y'\n
      }`"
      tags:
        - RTI (Runtime Infrastructure)
      parameters:
        - in: path
          description: "The id of the request."
          name: req_id
          schema:
            type: string
            example: "'H2dofbWhSZddTah9'"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  description: "The protected content key for decrypting a specific data object. The content key is not submitted in plaintext.
                  Instead the content key itself is encrypted using an ephemeral public key that is used for the purpose of this particular request
                  only. Data object owners must ensure that any requests for content keys as well as the requesting entities (i.e., node identity) 
                  is legit and can be trusted."
                  type: string
                  example: "M5+dcVg6EhR8cG3btEHdntR/8oRQfi719I+28m103IT7YVvI/E0ydmW/XPOlPbvx
                  S/av/2P0M4bklkwJBb+BRt5DJATAtmuKtXF+v5pdHTyYVHQUYOaffxuNatX6lf8m
                  QuguLE47E5IYnHUo+MlTyUnbk6Fbq7sy24nUgVjV478scZSETBkjZprecZs47s8J
                  JBs1zwblpDF21ps3alebKK5AdrE6u+I5/yK5fgl5xTMVOr/sXT14RZpbsc938jte
                  M+wxlPw1Wk4ksGX7Ir6vr/c5TM8wNAB81FskF90ttLYA5rYrZbJ+ZPQ+SzVrJ6r4
                  Oc7Bt25+WLaE5NdTxon5ZoGt0O6Li9zh6LbKz0vpuslLarsbpDhZeefJvfN+m5ER
                  rw/k8IDlSc1QKW45OmfRqzJcs09jKQmq6rrq5cf0eu8aqXVtXK0Be33vy3T+0HFb
                  cWHFyFpE5KBZvwCKpIPwk9jFk9zuUfTZCe5jQJytgBskm99SuqbsmuaYHHuZoub/
                  70Nq4CUaSLhaL/7tPUxib++IKtehss8CffeWg8sTpFwT8DJK8LGxknF+B5xY715O
                  x9YZ6xvhyUPAjP23Yo+5HFfgUB1eIJio9Zkc94l0u/EzrEnObNFhD2pDRJsGZJex
                  Jha639W9nm1Cne5Jn1oNAA7jl7CR7BCGISigy/i1fZc="
              required:
                - body
      responses:
        200:
          description: "Success"
        500:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /api/v1/nodedb/node:
    get:
      description: "Requests information about the node."
      tags:
        - NodeDB
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/node_information"
        500:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        
  /api/v1/nodedb/network:
    get:
      description: "Requests information about all peers known to the node."
      tags:
        - NodeDB
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    iid:
                      description: "The id of the node's identity."
                      type: string
                      example: "yllv41nn9s1565b8yg2wv6jgwi2mrffq0l5d99q0096gfjraecxpx4ql51j9qvys"
                    last_seen:
                      description: "The timestamp when the node has seen this peer the last time."
                      type: number
                      example: 1644287381261
                    rest_service_address:
                      description: "The address of the REST service used by this node."
                      type: string
                      example: "127.0.0.1:5001"
                    p2p_service_address:
                      description: "The address of the P2P service used by this node."
                      type: string
                      example: "127.0.0.1:4001"
                    dor_service:
                      description: "Indicates if the node is offering a DOR service."
                      type: boolean
                      example: true
                    rti_service:
                      description: "Indicates if the nodes is offering an RTI service."
                      type: boolean
                      example: true
                  required:
                    - iid
                    - last_seen
                    - rest_service_address
                    - p2p_service_address
                    - dor_service
                    - rti_service
                
        500:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /api/v1/nodedb/identity:
    get:
      description: "Requests information about all identities known to the node."
      tags:
        - NodeDB
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/identity_information"
                
        500:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    post:
      description: "Submits information about an identity. The node verifies the identity information using the signature and eithers adds the identity
      information to its database (if no information about this identity was known before) or updates its database records (if the identity information
      is more recent than the one on record)."
      tags:
        - NodeDB
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  $ref: "#/components/schemas/identity_information"
      responses:
        200:
          description: "Success"
                
        500:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /api/v1/nodedb/identity/{iid}:
    get:
      description: "Requests information about a specific identity."
      tags:
        - NodeDB
      parameters:
        - in: path
          description: "The id of the identity."
          name: iid
          schema:
            type: string
            example: "yllv41nn9s1565b8yg2wv6jgwi2mrffq0l5d99q0096gfjraecxpx4ql51j9qvys"
          required: true
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/identity_information"
                
        500:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

components:
  schemas:
    data_object_meta:
      title: Data Object Meta Information
      description: "Record of information about a data object, including the data type and format, the time the
      data object has been created as well as who created it. Note that there is (currently) no limitations or
      constraints as to what the values can be for the various fields (with exception of `created_t`). Instead, only
      recommendations are provided here."
      type: object
      properties:
        obj_id:
          description: "The id of the data object. It is calculated (using SHA256 hashing) when a data object is 
          created by a DOR (e.g., when adding data to a DOR) based on the content hash (`c_hash`), data type, data 
          format, creator name, time of creation, and a GPP hash (in case of a GPP data object)."
          type: string
          example: "3375ae0ba7910fe86158cd6396ba751f5f27bca3b821906f960b45fe1b5284fd"
        c_hash:
          description: "The SHA256 hash of the data object content."
          type: string
          example: "b4afb6192c6491b4491919944bf65c85ef003d873c2955696995cb4205479202"
        owner_iid:
          description: "The ID of the identity that owns this data object."
          type: string
          format: iid
          example: "32tm2i6ba6v7lw59tfduvldt8ofai40grxogy2k3hi4hnzt6do0zcwx9k3e23j9h"
        created_t:
          description: "A timestamp indicating when the data object has been created. The SaaS Middleware does not
          (currently) impose any particular timestamp format or encoding so as long as it is a number. However, it is
          recommended to use a commonly used encoding such as POSIX time (i.e., (time in milliseconds since the 
          beginning of the epoch). Time of creation here refers to the time when the data object has been added to a
          DOR."
          type: number
          example: 1643863677359
        created_by:
          type: string
          description: "A reference to who created the data object. The SaaS Middleware does not specify who qualifies
          as creator of a data object. Furthermore, it is not specified if this field is a clear name, such as 'John
          Doe', or using the ID of an identity. However, it is recommended to use references that are meaningful in the
          application context. For example, in practice this could mean to use the ID of the identity that has added
          the data object to the DOR."
          example: "581e2571c6fa8ba01ba6456df4d1fe175abe952362ee925dc9396e67d7fbeeaf"
        data_type:
          description: "The type of the data object as understood in the context of a particular application. The SaaS
          Middleware supports a multitude of applications. What constitutes a valid data type can thus not be defined
          here but must be done so for each application. For example, in the application context of a 'Digital Urban
          Climate Twin', there may be data types such as 'DUCT.AHProfile' or 'DUCT.NearSurfaceClimateVariables'."
          type: string
          example: "DUCT.AHProfile"
        data_format:
          description: "The format of the data object. This may refer to the specific format or scheme used to encode
          the data object content. The purpose of this field is to provide information on how to decode or interpret
          the data object content. For example, commonly used data formats are 'json' or 'csv'. Data type and format
          should be considered together. For example, there can be data objects with the same data type but different
          data formats."
          type: string
          example: "hdf5"
        access_restricted:
          type: boolean
          description: "Indicates whether access to the data object is restricted (`true`) or not (`false`)."
        content_encrypted:
          type: boolean
          description: "Indicates whether the content of the data object is encrypted (`true`) or not (`false`)."
        access:
          type: array
          items:
            type: string
          description: "A list of IDs belonging to identities that have been granted access to this data object."
          example: ['32tm2i6ba6v7lw59tfduvldt8ofai40grxogy2k3hi4hnzt6do0zcwx9k3e23j9h']
        tags:
          type: array
          items:
            type: object
          description: "A list of tags (i.e., objects consisting of `key` and `value` elements)."
          example: [{'key': 'a', 'value': '123'}, {'key': 'b', 'value': '567'}]
        gpp:
          $ref: "#/components/schemas/git_processor_pointer"
        recipe:
          $ref: "#/components/schemas/recipe"
      required:
        - obj_id
        - c_hash
        - owner_iid
        - created_t
        - created_by
        - data_type
        - data_format
        - access_restricted
        - content_encrypted
        - access
        - tags

    git_processor_pointer:
      title: Git Processor Pointer
      description: "Record of information about a processor adapter located in a Git repository. The information provided by the Git Processor Pointer (GPP)."
      type: object
      properties:
        source:
          type: string
          description: "The URL of a Git repository where to find the processor adapter."
          example: "https://github.com/cooling-singapore/saas-processor-template"
        commit_id:
          type: string
          description: "The specific commit id to be used. This allows to use specific versions of a processor adapter.
          by instructing the DOR to checkout a specific commit."
          example: "972bd54"
        proc_path:
          type: string
          description: "The path relative to the repository root, where to find the processor adapter."
          example: "processor_test"
        proc_config:
          type: string
          description: "The configuration of the processor adapter that is to be used. Note, not all adapters support
          multiple configuration. Nevertheless, the name of the configuration has to be specified."
          example: "default"
        proc_descriptor:
          $ref: "#/components/schemas/proc_descriptor"
      required:
        - source
        - commit_id
        - proc_path
        - proc_config

    github_credentials:
      title: GitHub Credentials
      description: "Credentials for accessing a GitHub repository."
      type: object
      properties:
        login:
          description: "The login of the GitHub account."
          type: string
          example: "JohnDoe"
        personal_access_token:
          description: "The personal access token for the GitHub account."
          type: string
          example: "ghp_wb3zXSRYUDKR9duei58sdryWSERrje3L0AXk"

    ssh_credentials:
      title: SSH Credentials
      description: "Credentials for accessing a remote machine via SSH."
      type: object
      properties:
        host:
          description: "The URL or IP address of the host."
          type: string
          example: "10.7.0.1"
        login:
          description: "The login of the user account."
          type: string
          example: "JohnDoe"
        key:
          description: "The password OR the private identity key required to login."
          type: string
          example: "some_silly_password..."
        key_is_password:
          description: "Indicates if the key is to be treated as password."
          type: boolean
          example: true

    recipe:
      title: Recipe
      description: "Provides the necessary information to reproduce a data object. Processor consume a number of 
      input data objects and produce some number of data objects. In principle, given the exact same input data
      objects and the exact same processor, it should be possible to reproduce the exact same output data objects.
      This assumes that the processor itself is deterministic. A recipe contains all the necessary information
      in order to reproduce data objects. Recipes are automatically generated by the RTI. In general, recipes are 
      not available for data objects that have been manually added to a DOR."
      type: object
      properties:
        processor:
          type: object
          properties:
            proc_id:
              description: "The id of the processor."
              type: string
              example: "d9a66be707927d498af58f3e69e4b38926eeb34a30c283ac18cdbdc3e3600a0e"
            gpp:
              $ref: "#/components/schemas/git_processor_pointer"
          required:
            - proc_id
            - gpp
        input:
          type: array
          items:
            type: object
            properties:
              name:
                description: "The name of the input data object."
                type: string
                example: "lh-profile"
              data_type:
                description: "The data type of the input data object."
                type: string
                example: "DUCT.AHProfile"
              data_format:
                description: "The data format of the input data object."
                type: string
                example: "geojson"
              type:
                description: "The type of the input data object."
                type: string
                enum: [ "value", "reference"],
                example: "reference"
              value:
                description: "[type=='value'] The value of the input data object."
                type: string
                example: "{a: '1'}"
              c_hash:
                description: "[type=='reference'] The c_hash of the input data object."
                type: string
                example: "9ab2253fc38981f5be9c25cf0a34b62cdf334652344bdef16b3d5dbc0b74f2f1"
            required:
              - name
              - data_type
              - data_format
              - type
        product:
          type: object
          properties:
            name:
              description: "The name of the output data object. This refers to the name of the specific output of the processor's output interface 
              that has produced this output data object."
              type: string
              example: "2m-climatic-variables"
            c_hash:
              description: "The content hash of the output data object that has been produced by the processor, given the input data objects."
              type: string
              example: "9ab2253fc38981f5be9c25cf0a34b62cdf334652344bdef16b3d5dbc0b74f2f1"
            data_type:
              description: "The data type of the input data object."
              type: string
              example: "DUCT.NearSurfaceClimateVariables"
            data_format:
              description: "The data format of the input data object."
              type: string
              example: "hdf5"
          required:
            - name
            - c_hash
            - data_type
            - data_format
      required:
        - processor
        - input
        - product

    error:
      title: Error Response Message
      description: "If a REST request was unsuccessufl, an error message is returned with additional information about the problem."
      type: object
      properties:
        status:
          description: "Status is always 'error'. May be used in further for further distinction between errors."
          type: string
          example: "error"
        reason:
          description: "The reason for the request to fail."
          type: string
          example: "Data object content not found"
        exception_id:
          description: "The unique id of the exception that caused this error. This information can be useful for debugging purposes."
          type: string
          example: "RzHwKxQbuEEOAbRB"
        details:
          description: "Optional additional information about the error."
          type: object
      required:
        - status
        - reason
        - exception_id

    authorisation:
      title: Authorisation Message
      description: "Verifiable authorisation information needed for actions (REST call). The server will verify if the signature
      has been generated by an identity authorised to perform the action. Note: only superficial information is provided here. The exact 
      specification of the authorisation message and how to generate a valid authorisation message is explained elsewhere. For details, 
      please refer to the implementation found in `saas.rest.request_manager.sign_authorisation_token()`."
      type: object
      properties:
        public_key:
          description: "The string encoded public key of the signing entity. This information is used to check if the signing entity is known
          to the server. If not then the server may reject the request (depending on the nature of the request)."
          type: string
          example: "MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAwMr9zfl+yb4/D747uxk7
          DxTDmRc4ftwVLKvHBLwinu4cabkY/tyznMvAfOkkh157xQhVj/XQ8s24L8/6N+e3
          XtYkoYpZ/ZF/68etDAUW6AIBGxmxwcTG2jqxyBRHXDorbhDqbLyhKBWYMb3fbUsx
          dKqclCv25TPVTlEfEyfyNhfrvQMxj6HV9XXgKAorVivOsgJxWfWf+gcVJ3amJwYG
          ZlgoDYAI4jUOKHDEeXNkxVZ5LxTvMPFcERhZr+kaRZwQT+BKmTKdFzNrzRdjhDeE
          38SEMSp8GMHARYsKc+YZQMaSPwLyFEP9l6TFoVq6u7VFWlDNwD995V3ww9pqF2Ia
          kaXbZB0b12wF/64wrXoYCWd76YnQYidaht9tyl78R/pIKEOiRbFxo2pvSC/FJUAI
          6SSXFDj/gnZrmBRH2St3B5+BVL1Z9utAFoTNDN9kkNM6hyMAIcRmg5SbafNZt9MC
          fA8G6YbHF81qbXBNrcup6W1dVZH5KL/W27cQkCFY6KUD18n4EfLc9S8h0K3PfJmm
          YMFz9qa32cn6XdgYklxkias1akBHa4sAR1LDPBHyIfmFsb1+YY1y6Dk437LaTD9Z
          X1Xzl4gufPMc4xH0d8a8m6+B2zJnsio3Yz1apRIGN04bXHz6Qq/qp7oFZvFotqDJ
          2ers/Ary8qpxerUZtzhUql8CAwEAAQ=="
        signature:
          description: "The signature created using the private key of the signing entity. The message that is being signed is an authorisation
          token structured in the following way: `hash(hash(url) + [ hash(body) ] + hash(slot) + hash(public_key))`, whereby 'hash' refers to string
          encoded SHA256, 'url' to the fully qualified URL of the request, 'body' to the optional JSON body of the request, 'slot' to the time slot 
          when the request was created, 'public_key' to the string encoded public key of the signing entity, and '+' to string concatenation."
          type: string
          example: "306502310080687d16402414829bbdaff2739896c5454831f125741eef640bec
          0cfdf2332b86fa7c3097d9f9c4f25f34524694ae630230490dce6d98f5999d52
          fa74eecdcd2dd762099e248d67d40369081929a0efe3b479e6b39c3c84076e0e
          a9e7fd20f7bab7"
      required:
        - public_key
        - signature

    proc_descriptor:
      title: Processor Descriptor
      description: "Record of information about a processor."
      type: object
      properties:
        name:
          description: "The name of the processor."
          type: string
          example: "test-proc"
        input:
          description: "The input interface of the processor, i.e., an array of input items. Each item has
          a name and specifies the data object type and format that is accepted by the processor for
          consuming the input data object."
          type: array
          items:
            type: object
            properties:
              name:
                description: "The name of the input."
                type: string
                example: "a"
              data_type:
                description: "The data type of the input."
                type: string
                example: "JSONObject"
              data_format:
                description: "The data format of the input."
                type: string
                example: "json"
              schema:
                description: "[if data_format=='json'] An optional JSON schema that specifies the structure of data in JSON format."
                type: object
                example: {'properties': {'v': {'type': 'number'}}, 'required': ['v'], 'type': 'object'}
            required:
              - name
              - data_type
              - data_format
          example: {'name': 'x', 'data_format': 'json', 'data_type': 'JSONObject'}
        output:
          description: "The output interface of the processor, i.e., an array of output items. Each item has
          a name and specifies the data object type and format that the processor will use for producing
          the output data object."
          # $ref: "#/components/schemas/interface_item"
          type: array
          items:
            type: object
            properties:
              name:
                description: "The name of the output."
                type: string
                example: "a"
              data_type:
                description: "The data type of the output."
                type: string
                example: "JSONObject"
              data_format:
                description: "The data format of the output."
                type: string
                example: "json"
              schema:
                description: "[if data_format=='json'] An optional JSON schema that specifies the structure of data in JSON format."
                type: object
                example: {'properties': {'v': {'type': 'number'}}, 'required': ['v'], 'type': 'object'}
            required:
              - name
              - data_type
              - data_format
          example: {'name': 'y', 'data_format': 'json', 'data_type': 'JSONObject'}
        configuration:
          description: "A list of runtime configurations supported by this processor. This primarily affects the deployment and execution of processors. Depending on the
          runtime environment, a corresponding configuration should be used."
          type: array
          items:
            type: string
          example: ['ubuntu-20.04', 'nscc']
      required:
        - name
        - input
        - output
        - configuration

    task_descriptor:
      title: Task Descriptor
      description: "Record of information about a task. This includes the ID of the processor that can execute
      this task and the ID of the identity on whose behalf the task is supposed to be executed. In addition, inputs and outputs
      need to be specified. Note that for each item in the processor's input/output interface specification, there needs to be
      a corresponding item (with the same name) specified by the task descriptor."
      type: object
      properties:
        processor_id:
          description: "The ID of the processor that can process this."
          type: string
          example: "fb802ab36792263873ad168c3ff1eaf236d9df0847585cd50012ff0418787d9e"
        user_iid:
          description: "The ID of the identity on whose behalf the task is being executed. Note that this user needs to have the
          access rights to all the input data objects in order to be executed."
          type: string
          example: "581e2571c6fa8ba01ba6456df4d1fe175abe952362ee925dc9396e67d7fbeeaf"
        input:
          type: array
          description: "Input data objects to be consumed by this task. Needs to match the specification of the input interface 
          of the processor. In other words, for each input item specified by the input interface of the processor, there needs
          to be an appropriate input data object with matching data type and format."
          items:
            type: object
            allOf:
              - properties:
                  name:
                    description: "The name of the input."
                    type: string
                    example: "input-1"
                  type:
                    description: "The type of the input."
                    type: string
                    enum: ["reference", "value"]
                required:
                  - name
                  - type
              - oneOf:
                  - title: "Reference"
                    type: object
                    properties:
                      obj_id:
                        description: "The ID of a data object used as the input."
                        type: string
                        example: "ef1bde41ebd7bc58a6e68db2d3c49d33f999d67fcd0568b6fc7723363664e478"
                      user_signature:
                        description: "A signature created by the user to ensure that the entity who created this task is indeed
                        the user (or more precisely: in possession of the user's private key) and thus acting on behalf of the 
                        user. This is to avoid cases where someone provides a `user_iid` for this task without actually being in 
                        control of the identity (i.e., pretending to be someone else who has permissions to access the data object).
                        Note: signature verification is only done for data objects that have access restrictions, i.e., a (valid)
                        signature is only need if access to a data object is restricted. Signature verification takes only place at
                        the time of task, but not at the time a task is created or submitted to an RTI."
                    required:
                      - obj_id
                  - title: "Value"
                    type: object
                    properties:
                      value:
                        description: "A valid JSON object used as the input."
                        type: object
                        example: {"value": 5}
                    required:
                      - value
        output:
          type: array
          description: "Output data objects to be produced by this task. Needs to match the specification of the output interface of the processor."
          items:
            type: object
            properties:
              name:
                description: "The name of the output"
                type: string
                example: "output-1"
              owner_iid:
                description: "The ID of the identity that will be assigned ownership for this data object."
                type: iid
                example: "581e2571c6fa8ba01ba6456df4d1fe175abe952362ee925dc9396e67d7fbeeaf"
              restricted_access:
                description: "Indicates whether access to this data object should be restricted."
                type: boolean
              content_encrypted:
                description: "Indicates whether the content of this data object should be encrypted."
                type: boolean
              target_node_iid:
                description: "The IID of the node whose DOR should be used to store this data object. If not specified,
                the RTI will attempt to store the data object on the same node that executes the task. This
                requires the node to also provide a DOR service which may not be the case in which case the task will
                fail."
                type: string
                example: "581e2571c6fa8ba01ba6456df4d1fe175abe952362ee925dc9396e67d7fbeeaf"
            required:
              - name
              - owner_iid
              - restricted_access
              - content_encrypted
      required:
        - processor_id
        - user_iid
        - input
        - output

    job_descriptor:
      title: Job Descriptor
      description: "Record of information about a job."
      type: object
      properties:
        id:
          description: "The unique ID of the job assigned by the RTI that executes the the job."
          type: string
          example: "n4EZVa3z"
        proc_id:
          description: "The ID of the processor that executes the job."
          type: string
          example: "581e2571c6fa8ba01ba6456df4d1fe175abe952362ee925dc9396e67d7fbeeaf"
        task:
          $ref: "#/components/schemas/task_descriptor"
        retain:
          description: "Indicates if working/intermediate materials, created during job execution, are retained after job execution. Note that 
          job retention is used primarily for testing and debugging purposes. There should be no need to retain working material of jobs
          in a production RTI systems."
          type: boolean
          example: false
      required:
        - id
        - proc_id
        - task
        - retain

    node_information:
      title: Node Information
      description: "Record of public information about a node."
      type: object
      properties:
        iid:
          description: "The id of the node's identity."
          type: string
          example: "yllv41nn9s1565b8yg2wv6jgwi2mrffq0l5d99q0096gfjraecxpx4ql51j9qvys"
        identity:
          description: "Information about the node's identity."
          $ref: "#/components/schemas/identity_information"
        dor_service:
          description: "Indicates if the node is offering a DOR service."
          type: boolean
          example: true
        rti_service:
          description: "Indicates if the nodes is offering an RTI service."
          type: boolean
          example: true
        rest_service_address:
          description: "The address of the REST service used by this node."
          type: string
          example: "127.0.0.1:5001"
        p2p_service_address:
          description: "The address of the P2P service used by this node."
          type: string
          example: "127.0.0.1:4001"
      required:
        - iid
        - identity
        - dor_service
        - rti_service
        - rest_service_address
        - p2p_service_address

    identity_information:
      title: Identity Information Record
      description: "Record of public information about an identity."
      type: object
      properties:
        iid:
          type: string
          description: "The id of the identity."
          example: "yllv41nn9s1565b8yg2wv6jgwi2mrffq0l5d99q0096gfjraecxpx4ql51j9qvys"
        name:
          type: string
          description: "The name of the identity."
          example: "Foo Bar"
        email:
          type: string
          description: "The contact email address of the identity."
          example: "foo.bar@somewhere.com"
        s_public_key:
          type: string
          description: "The public signing key. Can be used to verify signatures created by the identity."
          example: "MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAE2U87iJMpRORLgfhLXZBcwHMyZjccOGSU
          HV3fZ79y7AvEBR+ey8K8s4/sf1+N+ULwRyp/K39LHDB31N7GJH56v2oZxcGo72jN
          nbIVJSyQnET5JxJaeviVD0ZUvo/jlZeM"
        e_public_key:
          type: string
          description: "The public encryption key. Can be used to encrypt data intended for the identity only."
          example: "MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEApXdoOcYEDthunuebGvml
          Y2GGfz0fAgyW8m3hXoHQlV6pRMpmplhQTCDjS2BA05a2YHZhunCaS1OEoaWvDzLh
          x6R3Erd6ZS27zok9ZKLRLswBUtWIIV17sJRCPkAqddV6Mzimd6+6wT11lXGHWLsO
          Dpx0z/nb1zAJ4mLHywiDr2k+wNMtrcp9n4vYj9wM1xjrkUx56NuTMPlQ8JVm0isN
          xQMLel0e1Wqcz4+7kSU8Ighf3Bm5OOKkbXO/ICNC8whib7qCv4s+o+Qn5msWfsu1
          I8BCFmzeuJhjbK1fvfyn9q8gqKBQEbzsIpKTC/bdyNpbCwabofgY/akx2w4Zeb5Q
          5S7qcCLXZ8tTuuYKyYIQ0U+FTZD08360HLDsBU5i7KUzADU5cpWeg27RgxTwkyF/
          4IcD9I8J13afK+DUu4Vo+M1osVvX154zFkNtSAEyNOzppQz7BKuoBxoazSqGIIUP
          /Tgg7rAXkrRcDGGgHDTtQOqFPoC8PbtSoD7krK66G5A2+yXgpZfbvHnvzabqKwZQ
          ixOw92k+ZWc2SG2jBATYtRaZDjbgyjSZ0w2aKRhvQiDn2cpMvwvlJD4zQD8l9R7V
          P9Fp39iraCZIXImSmKYJq6p4ZJw6kEPnnk9rFg0vnTRcjBt3rq3fNTpdfuPU18tM
          kB/rI0KZt9PfqgHOYo9qpEECAwEAAQ=="
        nonce:
          type: number
          description: "A non-negative integer value that is increased by 1 every time the identity information is updated. The nonce is used
          by the system to decide if a record is more recent than another."
          example: 3
        signature:
          type: string
          description: "A signature that can be used to verify that the contents provided by this identity information record has been
          provided by the entity that controls the identity's private key. Unless the private key has been lost/stolen, the information should be
          considered as legit if the signature is valid. The NodeDB rejects idenitity updates with invalid signatures. Invalid records should thus
          not be observed during normal operations."
          example: "3066023100ecfb8f728ee2ae59196e173a2f57bdf1015815917007b6dead5873
          d803fe0953253baa83d7fc2dc2c81817a7e078c445023100d336a870cbe88847
          3941be3e56c8ccf55dde8f39ae086d8ce673296e4a6692fb1ca8bcc279d0d173
          4889592829c77fc7"
      required:
        - iid
        - name
        - email
        - s_public_key
        - e_public_key
        - nonce
        - signature

